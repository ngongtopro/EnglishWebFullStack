import faiss
import numpy as np
from sentence_transformers import SentenceTransformer
import openai  # Ho·∫∑c thay b·∫±ng model local n·∫øu c·∫ßn
from chatbot.chatbot_utils.constances import OPEN_AI_API_KEY
from openai import OpenAI

# 1. C·∫•u h√¨nh OpenAI (thay b·∫±ng m√¥ h√¨nh kh√°c n·∫øu b·∫°n d√πng local model)
openai.api_key = OPEN_AI_API_KEY

# 2. Kh·ªüi t·∫°o embedding model
embedder = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')

# 3. C∆° s·ªü d·ªØ li·ªáu vƒÉn b·∫£n (c√≥ th·ªÉ thay b·∫±ng file txt, PDF, v.v.)
documents = [
    "H·ªì Ch√≠ Minh l√† m·ªôt nh√† c√°ch m·∫°ng v√† Ch·ªß t·ªãch n∆∞·ªõc ƒë·∫ßu ti√™n c·ªßa Vi·ªát Nam.",
    "Tr√≠ tu·ªá nh√¢n t·∫°o (AI) ƒëang thay ƒë·ªïi c√°ch con ng∆∞·ªùi l√†m vi·ªác.",
    "RAG l√† m√¥ h√¨nh k·∫øt h·ª£p gi·ªØa truy xu·∫•t th√¥ng tin v√† t·∫°o ng√¥n ng·ªØ.",
    "FAISS l√† th∆∞ vi·ªán m√£ ngu·ªìn m·ªü d√πng ƒë·ªÉ t√¨m ki·∫øm vector hi·ªáu qu·∫£.",
]

# 4. T·∫°o vector embeddings v√† x√¢y FAISS index
doc_embeddings = embedder.encode(documents)
dimension = doc_embeddings[0].shape[0]
index = faiss.IndexFlatL2(dimension)
index.add(np.array(doc_embeddings))

client = OpenAI(api_key=OPEN_AI_API_KEY)

query = 'quit1'
while query != 'quit':
    # 5. Nh·∫≠n truy v·∫•n t·ª´ ng∆∞·ªùi d√πng
    query = input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n: ")
    response = client.chat.completions.create(
        model="gpt-4o",
        instructions="You are a coding assistant that talks like a pirate.",
        input=query
    )
    query_embedding = embedder.encode([query])
    k = 2  # s·ªë l∆∞·ª£ng vƒÉn b·∫£n g·∫ßn nh·∫•t
    _, indices = index.search(np.array(query_embedding), k)

    # 6. L·∫•y vƒÉn b·∫£n ph√π h·ª£p
    retrieved_docs = [documents[i] for i in indices[0]]
    context = "\n".join(retrieved_docs)

    # 7. G·ª≠i prompt cho m√¥ h√¨nh LLM (·ªü ƒë√¢y d√πng GPT-3.5)
    prompt = f"""
    B·∫°n l√† m·ªôt tr·ª£ l√Ω th√¥ng minh. D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë th√¥ng tin tham kh·∫£o:

    {context}

    D·ª±a tr√™n c√°c th√¥ng tin tr√™n, tr·∫£ l·ªùi c√¢u h·ªèi: "{query}"
    """

    # 8. G·ªçi OpenAI GPT
    response = openai.completions.create(
        model="gpt-3.5-turbo",  # ho·∫∑c "gpt-4", "gpt-4o"
        messages=[
            {"role": "user", "content": prompt}
        ],
        temperature=0.7
    )

    print("\nüìå C√¢u tr·∫£ l·ªùi:")
    print(response['choices'][0]['message']['content'])
